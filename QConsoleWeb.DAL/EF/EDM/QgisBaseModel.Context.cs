//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QConsoleWeb.DAL.EF.EDM
{
    using Microsoft.EntityFrameworkCore;
    using QConsoleWeb.DAL.EF.EDM;
    using System;


    public partial class BaseEntities : DbContext
    {
        private string _conn;
        public BaseEntities(string conn)
        {
            _conn = conn;
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            //optionsBuilder.UseNpgsql("Host=127.0.0.1;Database=QGIS_BASE;Username=admin;Password=1");
            optionsBuilder.UseNpgsql(_conn);
        }


        public virtual DbSet<Logtable> logtable { get; set; }
        public virtual DbSet<Dictionaries> dictionaries { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasPostgresExtension("fuzzystrmatch")
                .HasPostgresExtension("postgis")
                .HasPostgresExtension("postgis_tiger_geocoder")
                .HasPostgresExtension("postgis_topology")
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity<Dictionaries>(entity =>
            {
                entity.ToTable("dictionaries", "schema_spr");

                entity.ForNpgsqlHasComment("Справочники для учета в QConsole");

                entity.Property(e => e.id)
                    .HasColumnName("id")
                    .HasDefaultValueSql("nextval('schema_spr.dictionaries_id_seq'::regclass)");

                entity.Property(e => e.schema_name)
                    .IsRequired()
                    .HasColumnName("schema_name");

                entity.Property(e => e.table_name)
                    .IsRequired()
                    .HasColumnName("table_name");
            });

            modelBuilder.Entity<Logtable>(entity =>
            {
                entity.HasKey(e => e.gid)
                    .HasName("logger_edit_pkey1");

                entity.ToTable("logtable", "logger");

                entity.Property(e => e.gid)
                    .HasColumnName("gid")
                    .HasDefaultValueSql("nextval('logger.logtable_gid_seq'::regclass)");

                entity.Property(e => e.action)
                    .IsRequired()
                    .HasColumnName("action");

                entity.Property(e => e.address)
                    .IsRequired()
                    .HasColumnName("address");

                entity.Property(e => e.context).HasColumnName("context");

                entity.Property(e => e.gidnum).HasColumnName("gidnum");

                entity.Property(e => e.query).HasColumnName("query");

                entity.Property(e => e.tablename)
                    .IsRequired()
                    .HasColumnName("tablename");

                entity.Property(e => e.tableschema).HasColumnName("tableschema");

                entity.Property(e => e.timechange).HasColumnName("timechange");

                entity.Property(e => e.username)
                    .IsRequired()
                    .HasColumnName("username");
            });

            modelBuilder.HasSequence("check_to_delete_gid_seq");

            modelBuilder.HasSequence("logtable_gid_seq");

            modelBuilder.HasSequence("dictionaries_id_seq").StartsAt(17);
        }
    }
}
